/*
  Some examples are in src/numerical/quadpack.lisp
*/

/* close enough */
(kill(ce), ce(x,y,eps) := is(abs(first(x)-y)<eps),
kill(cec), cec(x,y,eps) := is(abs(realpart(first(x))-realpart(y))
      + abs(imagpart(first(x))-imagpart(y)) < eps), true)$
true;

ce(nintegrate(x^3*log(abs((x^2-1)*(x^2-2))),[x,0,3]), 52.7407484, 1d-7)$
true;

ce(nintegrate(x^3*log(abs((x^2-1)*(x^2-2))),[x,0,3],[1,sqrt(2)]),52.7407483, 1d-7)$
true;

/* quadpack does this without the intermediate points */
ce(nintegrate(x^3*log(abs((x^2-1)*(x^2-2))),[x,0,3]),52.7407483, 1d-6)$
true;

ce(nintegrate(x^2*exp(-4*x), [x, 0, inf]),0.03125, 1d-10)$
true;

ce(nintegrate(sin(sin(x)), [x, 0, 2]), 1.247056058, 1d-8)$
true;

ce(nintegrate(exp(exp(-x)), [x, 0, 5]), 6.31115283, 1e-8)$
true;

ce(nintegrate(x^x, [x, 1, 5]),1241.03328404, 1e-8)$
true;

ce(nintegrate(1/(1+x^2), [x, 0, inf]), 1.570796326794897, 1d-9)$
true;

/* No single quadpack routine will do this. */
ce(nintegrate(1/sqrt(abs(1-x)) * exp(-x),[x,0,inf], [1] ), 1.728208345998, 1d-9)$
true;

/* This looks for the singularity */
ce(nintegrate(1/sqrt(abs(1-x)) * exp(-x),[x,0,inf]), 1.728208345998, 1d-9)$
true;

/* The simplifier removes %i before the routine is called */
ce(nintegrate( cos(%i * x), [x,0,1]), sinh(1.0), 1d-11)$
true;

/* The routine does two real integrals for this example. */
cec(nintegrate(exp(%i*x) * exp(-x*x), [x,0,inf]), .4244363835020222 * %i + .6901942235215709, 1e-8)$
true;

/* Excessive roundoff reported here. Probably for the integral that gives zero */
cec(nintegrate( %i * exp(%i*x)/(1/2 + exp(%i*x)), [x,0,2*%pi]),
    6.28318531*%i-1.05172327e-16, 1e-8)$
true;

/* Singularity at end point */
ce(nintegrate(x^(1/2)*log(1/x), [x, 0, 1]), 4/9, 1e-12)$
true;

ce(nintegrate(1/sqrt(x), [x,0,1]),2,1e-10)$
true;

ce(nintegrate(1/sqrt(1-x), [x,0,1]),2,1e-10)$
true;

ce(nintegrate(1/x^(1/3), [x,0,1]),1.5, 1e-10)$
true;

ce(nintegrate(1/(1-x)^(1/3), [x,0,1]),1.5, 1e-10)$
true;

ce(nintegrate(1/x^(1/5), [x,0,1]),1.25, 1e-10)$
true;

ce(nintegrate(1/(1-x)^(1/5), [x,0,1]),1.25, 1e-10)$
true;

/*

Look at, or include these from Mma docs.

nintegrate(log(x),[x,0,1]);
nintegrate(log(log(x)),[x,0,1]);
nintegrate(sqrt(log(x)),[x,0,1]);
nintegrate(log(x)^2,[x,0,1]);
nintegrate(1/(sqrt(1-x)*x^(1/5)),[x,0,1]);
nintegrate(1/(sqrt(sin(x))),[x,0,10]);

Hmmm compare following to Mathematica:
nintegrate(sqrt(log(x-7)),[x,0,20]);
nintegrate(sqrt(log(x-7)),[x,0,20], [7,8]);
rectform(float(rectform(integrate(sqrt(log(x-7)),x,0,20))));

 NIntegrate[Sqrt[Log[x - 7]], {x, 0, 20}, Exclusions -> {7, 8}]

Need lots of intervals here.
nintegrate(exp(%i*x),[x,1,10^4], subint -> 10000);

This does not work with infinite range.
nintegrate(bessel_j(1,x),[x,1,inf],subint->10000);
This gets there, but very slowly
nintegrate(bessel_j(1,x),[x,1,30000],subint->10000);

nintegrate(bessel_j(2,sqrt(2)*x)^2,[x,1,10^4],subint->10000);

Converges too slowly
nintegrate(sin(1/((5*x-1)*(5*x-2)*(5*x-3))),[x,0,1], subint->10000);

This is worse
nintegrate(sin(1/((5*x-1)*(5*x-2)*(5*x-3))),[x,0,1], [1/5,2/5,3/5],  subint->10000);

Ok
nintegrate(1/sqrt(x) + cos(x), [x,0,5000], subint->1000);

nintegrate(sin(x)/sqrt(x),[x,0,5000],subint->1000);

*/

kill(ce)$
done;

/* We cannot do these:

  quad_qag(cos(log(x)/x)/x, x,0,1,6); fails
  nintegrate(cos(log(x)/x)/x,  [x,0,1]);

  nintegrate(exp(%i*x*x),[x,minf,inf]); fails

  The error estimates given here are too low, I think
  nintegrate(exp(%i*x*x),[x,-200,200],subint->10000);
  [1.25170114 %i + 1.25804682, 2.507635982e-8, 760578, no problems]
*/
