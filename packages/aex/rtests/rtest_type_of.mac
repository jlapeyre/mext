/*

This is still being worked on. These should pass, but they are not yet
quite what we want.

*/

/* At least three different 'types' reported by different lisps */
/* Test 1 */
( %%test_bit%%(x) :=
    is(first(x) = 'integer) and
    is(member(second(x), ['lisp_bit, 'lisp_fixnum, 'lisp_integer])),
  %%test_int%%(x) :=
    is(first(x) = 'integer) and
    is(member(second(x), ['lisp_fixnum, 'lisp_integer])),
  %%test_float%%(x) :=
    is(member( x, ['lisp_long_float, 'lisp_double_float])),

0);
0$

/* Test 2 */
(errcatch(type_of()),error_code);
'args_too_few$

/* Test 3 */
type_of(0);
'integer$

/* Test 4 */
first(type_of(0,info->true));
'integer$

/* Test 5 */
%%test_bit%%(type_of(0,info->true));
true$

/* Test 6 */
type_of(1);
'integer$

/* Test 7 */
%%test_bit%%(type_of(1,info->true));
true$

/* Test 8 */
type_of(2);
'integer$

/* Test 9 */
%%test_int%%(type_of(2,info->true));
true$

/* Test 10 */
type_of(1.0);
'float$

/* Test 11 */
type_of(0.0);
'float$

/* Test 12 */
type_of(-1.0);
'float$

/* Test 13 */
type_of(-1);
'integer$

/* Test 14 */
%%test_int%%(type_of(-1,info->true));
true$

/* Test 15 */
type_of(1b10);
'bfloat$

/* Test 16 */
type_of(1/4);
'ratio$

/* Test 17 */
type_of(-1/4);
'ratio$

/* Test 18 */
type_of(rat(1/4),info->true);
'[ratio,cre]$

/* Test 19 */
type_of(intopois(1/4),info->true);
'[ratio,pois]$

/* Test 20 */
type_of("cat");
'string$

/* Test 21 */
type_of('b);
'symbol$

/* Test 22 */
type_of([]);
'list$

/* Test 23 */
type_of(%%fg(x));
'%%fg$

/* Test 24 */
type_of(%%fg(x), info->true);
'%%fg$

/* Test 25 */
type_of(%e);
'symbol$

/* Test 26 */
type_of(%e,info->true);
['symbol, 'constant]$

/* Test 27 */
type_of('aabb,info->true);
'symbol$

/* Test 28 */
type_of(%i,info->true);
['symbol, 'constant]$

/* Test 29 */
type_of(<<1,2>>);
'list$

/* Test 30 */
type_of( <<1,2>>, info->true);
['list,'aex]$

/* Test 31 */
type_of(rat(1))$
'integer$

/* Test 32 */
type_of(rat(1),info->true)$
'[integer,cre,lisp_bit]$

/* Test 33 */
type_of({1})$
'set;

/* Test 34 */
type_of({1},info->true);
'set;

/* Test 35 */
type_of('a+'b);
'mplus$

/* Test 36 */
type_of('a+'b,info->true);
'mplus$

/* Test 37 */
type_of(intopois(2));
'integer;

/* Test 38 */
type_of(intopois(2),info->true);
'[integer, pois,lisp_integer]$

/* Don't know if we should descend into representations.
  The following probably is not useful, but who knows ? */
/* Test 39 */
type_of(<<intopois(f(1,2))>>,info->true);
'[pois,aex]$


/* Test 40 */
(kill(%%res%%), 0);
0$
