/* Test 1 */
kill(a);
done;

/* Test 2 */
/* permutation with n = 20 */
(a : [19, 18, 8, 10, 15, 4, 7, 14, 13, 5, 16, 12, 3, 20, 1, 6, 11, 17, 2, 9],
  perm_to_cycles(a));
[[12], [7], [13, 9, 20, 14, 8, 3],
    [15, 5, 10, 4, 6, 16, 11, 17, 18, 2, 19, 1]]$

/* Test 3 */
permutation_p(a);
true$

/* Test 4 */
signature_permutation(a);
1$

/* Test 5 */
is( a = cycles_to_perm(perm_to_cycles(a),ot->ml));
true$

/* Test 6 */
inverse_permutation(a,ot->ml);
[15, 19, 13, 6, 10, 16, 7, 3, 20, 4, 17, 12, 9, 8, 5, 11, 18, 2, 1, 14]$

/* Test 7 */
is( a = inverse_permutation(inverse_permutation(a),ot->ml));
true$

/* Test 8 */
perm_to_transpositions(a);
[[13, 9], [13, 20], [13, 14], [13, 8], [13, 3], [15, 5], [15, 10], 
[15, 4], [15, 6], [15, 16], [15, 11], [15, 17], [15, 18], [15, 2], [15, 19], 
[15, 1]]$

/* Test 9 */
is( a = transpositions_to_perm(perm_to_transpositions(a),ot->ml));
true$

/* Test 10 */
/* omit one transposition */
signature_permutation(transpositions_to_perm(rest(perm_to_transpositions(a))))
  * signature_permutation(a);
-1$

/* Test 11 */
length(perm_to_cycles(random_cycle(100)));
1;

/* Test 12 */
is(from_digits([1,2,3]) = 123);
true$

/* Test 13 */
is(from_digits([0,2,3]) = 23);
true$

/* Test 14 */
(num : 2^1000, is(from_digits(integer_digits(num))=num));
true$

/* Test 15 */
is(from_digits(integer_digits(num,3),3)=num);
true$

/* Test 16 */
is(from_digits(integer_digits(num,32),32)=num);
true$

/* Test 17 */
is(from_digits(integer_string(num))=num);
true$

/* Test 18 */
is(from_digits(integer_string(num,3),3)=num);
true$

/* Test 19 */
is(from_digits(integer_string(num,32),32)=num);
true$

/* Test 20 */
select(lrange(100),abundant_p);
[12, 18, 20, 24, 30, 36, 40, 42, 48, 54, 56, 60, 66, 70, 72, 78, 80, 
 84, 88, 90, 96, 100]$

/* Test 21 */
select(lrange(10^4),perfect_p);
[6, 28, 496, 8128]$

/* Test 22 */
aliquot_sequence(100,100);
[100, 117, 65, 19, 1, 0]$

/* Test 23 */
is(tofloat(1.0)=1.0);
true$

/* Test 24 */
is(tofloat(1)=1.0);
true$

/* Test 25 */
is(bfloatp(tofloat(1,20)));
true$

/* decided against this behavior */
/* Test xx */
/*
is(bfloatp(tofloat(1.0,20)));
false$
*/

/*
  If domain:complex, then neither
  float(rectform(float(discr_expr)))
  nor
  rectform(float(rectform(discr_expr)))
  give us a complex float.
  But each of these do work:
  rectform(float(rectform(float(x))))
  float(rectform(float(rectform(x))))
*/
/* Test 26 */
(discr_expr : -%e^-1*gamma_incomplete(2/3,-1)/(-1)^(2/3) -(-1)^(2/3)*%e^-1*gamma(2/3)-(-1)^(1/3)*%e^-1*gamma(2/3),
  numberp(inpart(tofloat(discr_expr),1)));
true$

/* Test 27 */
numberp(inpart(tofloat([discr_expr]),1,1));
true$

/* Test 28 */
is(tofloat((-1)^(1/%pi)) = tofloat(%i*sin(1)+cos(1)));
true$

/* Test xx */
/*
is(tofloat(%e^((log(2)+2*%i*%pi)/3)) =
  tofloat(sqrt(3)*%i*%e^(log(2)/3)/2-%e^(log(2)/3)/2));
true$
*/

/* Test 29 */
bfloatp(inpart(tofloat(discr_expr,20),1));
true$

/* Test 30 */
tofloat(%i);
%i$

/* Test 31 */
tofloat(%%%xyz%%%);
'%%%xyz%%%$

/*
   Automatically try bfloat if float fails.
   This is not fine grained, since we are letting
   float and bfloat walk the trees.
*/
/* Test 32 */
bfloatp(tofloat(10^500,10));
true$

/* Test 33 */
is( abs(tofloat((-3)^(%i/3)) - float(rectform((-3)^(%i/3)))) < 1e-10);
true$

/* Test 34 */
is( abs(tofloat((-3)^(%i/3),30) - float(rectform((-3)^(%i/3)))) < 1e-10);
true$

/* test removed infinite loop bug */
/* Test 35 */
is( abs(tofloat((-7)^(1/2)) - float((-7)^(1/2))) < 1e-10);
true$

/* Test 36 */
is( abs(tofloat((-7)^(1/2),50) - bfloat((-7)^(1/2))) < 1e-10);
true$

/* Test 37 */
?complex\-number\-p(tofloat((-3+%i)^(1/3)));
true$

/* Test 38 */
is(tofloat(lrange(10,ot->ar)) = lrange(1.0,10.0,1.0,ot->ar));
true$

/* Test 39 */
is(lrange(1b0,10b0,1b0,ot->ar) = tofloat(lrange(1,10,1,ot->ar),16));
true$

/*

 This is a big in zeta() that needs to be fixed.

(%i232) zeta(3b0);
            1293943645091921135119811358924355571070381762145903373
(%o232)     -------------------------------------------------------
            1076441258055923548704358908363137134682029110067200000

*/

/* Test 40 */
is(precision(1.23456789012345678b0) >= 18);
true$

/* Test 41 */
precision(1);
'inf$

/* Test 42 */
precision(-1);
'inf$

/* Test 43 */
precision(1/4);
'inf$

/* Test 44 */
precision(-1/4);
'inf$

/* Test 45 */
precision(1);
'inf$

/* Test 46 */
precision(1.0);
'machine_precision$

/* Test lisp-only  numbers */
/* Test 47 */
precision(lratio(1/4));
'inf$

/* Test 48 */
precision(lcomplex(%i + 1));
'inf$

/* Test 49 */
precision(lcomplex(%i + 1.0));
'machine_precision$

/* Test that %i is converted to float 1.0 * %i */
/* Test 50 */
is (abs(harmonic_number(1.0 +  %i) - (.5766740474685794*%i+1.171865985481091)) < 1e-8);
true$

/* Test 51 */
harmonic_number(0);
'harmonic_number(0)$

/* Test 52 */
harmonic_number(0.0);
'harmonic_number(0.0)$

/* Test 53 */
harmonic_number(1);
1$

/* Test 54 */
harmonic_number(1.0);
1.0$

/* Test 55 */
harmonic_number(2);
3/2$

/* Test 56 */
harmonic_number(3/2);
8/3-2*log(2)$

/* Test simplifying */
/* Test  */
subst(100,n,integer_digits(n));
[1,0,0]$

/*
 TODO.

 This gives zero without warning unless we increase the
 number of digits greatly. We only need this many intermediate
 digits.

 tofloat(1-sqrt(1-exp(-1000)),500);

 We should be able to ask for 

 tofloat(1-sqrt(1-exp(-1000)),20);

 and get a result.

 ----

 No bfloat routines for bessel functions

 Mathematica does convert the exponent here because
 the whole thing is not NumericQ.
 
 tofloat(x^(3/2+y));

*/

/* Test 57 */
kill(a,num,discr_expr);
done;
