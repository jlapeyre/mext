/*  Copyright 2011 by Barton Willis

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 3.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>. */

/* This code must not be compiled -- GJL */

/* copied from to_poly_solve -- GJL */
block([inflag : true], if not(member('fullratsubst, map('op, functions))) then load("lrats"));

(load('basic),load('simplifying));

/* Add don't kill for mext -- GJL */
dont_kill_share("basic");
dont_kill_share("lrats");
dont_kill( simp_assuming, float_free_p, mygramschmidt, maybe_solve,
           alt_eigen, alt_eigen_h);

simp_assuming(pred,f) := block([prederror : false, bool : is(pred)],
  if bool = true then f 
  else if bool = false then 'unknown
  else simpfuncall('assuming, pred,f));

simplifying('assuming,'simp_assuming)$

/* Gram-Schmidt assuming that p vanishes. 

(1) Due to the conjugate([rat(0)]) --> error, the dot function maps conjugate.
(2) Last I tried, doing the fullratsubst inside proj speeds some calculations. */

mygramschmidt(v,p) := block([u : [], proj, dot, uk, doallmxops : true, scalarmatrixp : true],   
   dot : lambda([a,b], map('conjugate, transpose(a)) . b),
   proj : lambda([a,b], fullratsubst(p, apply('dot,[a,b]) * a / apply('dot, [a,a]))),    
   for vk in v do (         
      uk : vk - lsum(proj(s,vk), s, u),
      uk : fullratsubst(p, ratexpand(uk)),        
      if some(lambda([s], is(s # 0)), uk) then push(uk, u)),  
   u)$
 
