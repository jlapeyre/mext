/*
  Some examples are in src/numerical/slatec/quadpack.lisp
 
  Mma examples are from Mma 8
 
*/

/* Test 1 */
/* close enough tests */
(kill(ce), ce(x,y,eps) := is(abs(first(x)-y)<eps),
kill(cel), cel(x,y,eps) := is(apply('max,abs(x-y))<eps),
kill(cec), cec(x,y,eps) := is(abs(realpart(first(x))-realpart(y))
      + abs(imagpart(first(x))-imagpart(y)) < eps), true)$
true;

/* Test 2 */
(errcatch(nintegrate(x,[x,a,b])), error_code);
'chk_to_or_float_minf$

/* Test 3 */
(errcatch(nintegrate(x,[x,inf,b])), error_code);
'chk_to_or_float_minf$

/* Test 4 */
(errcatch(nintegrate(x,[x,3,b])), error_code);
'chk_to_or_float_inf$

/* Test 5 */
(errcatch(nintegrate(x,[x,3,minf])), error_code);
'chk_to_or_float_inf$

/* Test 6 */
(errcatch(nintegrate(x,[3,1,2])), error_code);
'chk_or_symbol_subvar$

/* Can't use this with multidim integrals */
/* Test 7 */
(errcatch(nintegrate(x,[p,1,2])), error_code);
'expr_freeof_var$

/* Need this test */
/* Test 8 */
ce(nintegrate(3,[p,1,2]), 3, 1e-10);
true$

/* Test 9 */
(errcatch(nintegrate(x,[x,1,3], points->[a])), error_code);
'chk_to_float_listof$

/* Test 10 */
(errcatch(nintegrate(x,[x,1,3], points->3)), error_code);
'chk_to_float_listof$

/* Test 11 */
ce(nintegrate(x,[x,1,3], points->[%e]), 4, 1e-9);
true$

/* Test 12 */
cel(nintegrate([x,x^2,x^3], [x,0,1], info->false), [1/2,1/3,1/4], 1e-9);
true$
  
/*
 Calls qags, because singularities are not found. We need to look
 for zeroes of log.

 NIntegrate[x^3*Log[Abs[(x^2-1)*(x^2-2)]],{x,0,3}]
 52.7407 + 1e-18 I

 integrate(x^3*log(abs((x^2-1)*(x^2-2))),x,0,3);
 can't do.

 Integrate[x^3*Log[Abs[(x^2-1)*(x^2-2)]],{x,0,3}]                                                               
 (-108 + 4*Log[2] + 77*Log[7] + 80*Log[8])/4

*/
/* Test 13 */
ce(nintegrate(x^3*log(abs((x^2-1)*(x^2-2))),[x,0,3]),
 (-108 + 4*log(2) + 77*log(7) + 80*log(8))/4 , 1d-7)$
true;

/* Calls qagp */
/* Test 14 */
ce(nintegrate(x^3*log(abs((x^2-1)*(x^2-2))),[x,0,3], points->[1,sqrt(2)]),52.7407483, 1d-7)$
true;

/* Test 15 */
ce(nintegrate(x^2*exp(-4*x), [x, 0, inf]),0.03125, 1d-10)$
true;

/* Test 16 */
ce(nintegrate(sin(sin(x)), [x, 0, 2]), 1.247056058, 1d-8)$
true;

/* Test 17 */
ce(nintegrate(exp(exp(-x)), [x, 0, 5]), 6.31115283, 1e-8)$
true;

/* Test 18 */
ce(nintegrate(x^x, [x, 1, 5]),1241.03328404, 1e-8)$
true;

/* Test 19 */
ce(nintegrate(1/(1+x^2), [x, 0, inf]), 1.570796326794897, 1d-9)$
true;

/* Test 20 */
/* No single quadpack routine will do this. */
ce(nintegrate(1/sqrt(abs(1-x)) * exp(-x),[x,0,inf], points->[1] ), 1.728208345998, 1d-9)$
true;

/* Test 21 */
/* Test that singularties are found and are included or not depending on limits. */
/* include x=1 */
ce(nintegrate(1/sqrt(abs(1-x)) * exp(-x),[x,0,inf]), 1.728208345998, 1d-9)$
true;

/* Test 22 */
/* Find, but don't use x=1 */
ce(nintegrate(1/sqrt(abs(1-x)) * exp(x),[x,minf,0]),0.757872156141312, 1e-7)$
true;

/* Test 23 */
/* Find and use x=-1 */
ce(nintegrate(1/sqrt(abs(1+x)) * exp(x),[x,minf,0]),1.728208345998552, 1e-7)$
true;

/* Test 24 */
/* Find, but don't use x=-1 */
ce(nintegrate(1/sqrt(abs(1+x)) * exp(-x),[x,0,inf]),0.757872156141312, 1e-7)$
true;

/* Test 25 */
/* Two singularities. outside of region */
ce(nintegrate( 1/((x-3)*(x-6)) , [x,4,5]), -2*log(2)/3, 1e-10)$
true;

/* Test 26 */
/* The simplifier removes %i before the routine is called */
ce(nintegrate( cos(%i * x), [x,0,1]), sinh(1.0), 1d-11)$
true;

/* Test 27 */
/* The routine does two real integrals for this example. */
cec(nintegrate(exp(%i*x) * exp(-x*x), [x,0,inf]), .4244363835020222 * %i + .6901942235215709, 1e-8)$
true;

/*
  Excessive roundoff reported here. Probably for the integral that gives zero

  Note that:
  integrate( %i * exp(%i*x)/(1/2 + exp(%i*x)), x,0,2*%pi) --> 0
  
*/
/* Test 28 */
cec(nintegrate( %i * exp(%i*x)/(1/2 + exp(%i*x)), [x,0,2*%pi]), %i * 2 * %pi, 1e-8)$
true;

/* Test 29 */
/* Singularity at end point */
ce(nintegrate(x^(1/2)*log(1/x), [x, 0, 1]), 4/9, 1e-12)$
true;

/* Test 30 */
ce(nintegrate(1/sqrt(x), [x,0,1]),2,1e-10)$
true;

/* Test 31 */
ce(nintegrate(1/sqrt(1-x), [x,0,1]),2,1e-10)$
true;

/* Test 32 */
ce(nintegrate(1/x^(1/3), [x,0,1]),1.5, 1e-10)$
true;

/* Test 33 */
ce(nintegrate(1/(1-x)^(1/3), [x,0,1]),1.5, 1e-10)$
true;

/* Test 34 */
ce(nintegrate(1/x^(1/5), [x,0,1]),1.25, 1e-10)$
true;

/* Test 35 */
ce(nintegrate(1/(1-x)^(1/5), [x,0,1]),1.25, 1e-10)$
true;

/* Test 36 */
ce(nintegrate(1/x^(4/5), [x,0,1]),5, 1e-10)$
true;

/*
 Compare our result with the following

 NIntegrate[1/(1-x)^(1/3), {x,0,2}]
 Fails. converging too slowly

 Supply intermediate point.
 NIntegrate[1/(1-x)^(1/3), {x,0,1,2}]
 2.25 - 1.29904 I                    

 Integrate[1/(1-x)^(1/3), {x,0,2}]
 (-3*(-1 + (-1)^(2/3)))/2
 =  9/4 + I * (-3*Sqrt[3])/4
 = 2.25 - 1.29904 I

(%i1) integrate(1/(1-x)^(1/3), x,0,2);
(%o1)                                  0
(%i2) (-3*(-1 + (-1)^(2/3)))/2;
(%o2)                                  0

*/
/* Test 37 */
cec(nintegrate(1/(1-x)^(1/3), [x,0,2]), 9/4 + %i*(-3*sqrt(3))/4, 1e-10)$
true;

/*

 In this case, Mma does not need user supplied singularities
 
 In[19]:= NIntegrate[1/(1-x)^(1/3) * Exp[-x], {x,0,1,Infinity}]
 Out[19]= 1.11124 - 0.431412 I

 In[20]:= Integrate[1/(1-x)^(1/3) * Exp[-x], {x,0,1,Infinity}]
  -(((-1)^(2/3)*Gamma[2/3])/E) + ((-1)^(1/3)*(-Gamma[2/3] + Gamma[2/3, -1]))/E

 = - (Sqrt[3]*Im[Gamma[2/3, -1]])/(2*E) +                                                                
 (-Gamma[2/3] + Re[Gamma[2/3, -1]])/(2*E) +
  I * (-(Sqrt[3]*Gamma[2/3])/(2*E) + Im[Gamma[2/3, -1]]/(2*E) +
  (Sqrt[3]*(-Gamma[2/3] + Re[Gamma[2/3, -1]]))/(2*E))

 = 
 1.11124 - 0.431412 I

  Maxima gets it wrong.
 (%i1) integrate(1/(1-x)^(1/3) * exp(-x), x,0,inf);
 (%o1) -%e^-1*gamma_incomplete(2/3,-1)
 (%i2) rectform(float(%));
 (%o2) .7466515802939357*%i-.9292316417099723
 (%i3) 

 We compare nintegrate to the exact Mma output.
*/
/* Test 38 */
cec(nintegrate(1/(1-x)^(1/3) * exp(-x), [x,0,inf]),
  rectform(float(-(sqrt(3)*imagpart(gamma_incomplete(2/3, -1)))/(2*%e) +
  realpart(gamma_incomplete(2/3, -1))/(2*%e) +
  %i*(-((sqrt(3)*gamma(2/3))/%e) + imagpart(gamma_incomplete(2/3,
 -1))/(2*%e) + (sqrt(3)*realpart(gamma_incomplete(2/3, -1)))/(2*%e)))),
  1e-10);
true$

/*
 Find two singularities, split the integral at one of them, and pass
 the other to qagp. two of each of these for complex and real part.
*/
/* Test 39 */
cec(nintegrate(1/((1-x)*(2-x))^(1/3) * exp(-x), [x,0,inf]),
  .9232162627329499-.5571602118093695*%i, 1e-10);
true$

/* Test 40 */
ce(nintegrate(airy_ai(10*log(x)),[x,0,1]), .06392250187680061, 1e-9)$
true;

/* Test 41 */
ce(nintegrate(sin(10^3*sqrt(x)),[x,0,1]),-.001123104393500761, 1e-10)$
true;

/* Test 42 */
ce(nintegrate(log(x),[x,0,1]), -1, 1e-12)$
true;

/* Test 43 */
cec(nintegrate(log(log(x)),[x,0,1]), %pi * %i - .5772156649015613, 1e-10)$
true;

/* Test 44 */
cec(nintegrate(sqrt(log(x)),[x,0,1]), sqrt(%pi)*%i/2, 1e-8)$
true;

/* Test 45 */
ce(nintegrate(log(x)^2,[x,0,1]), 2, 1e-13)$
true;

/* Test 46 */
ce(nintegrate(1/(sqrt(1-x)*x^(1/5)),[x,0,1]), beta(1/2,4/5), 1e-8)$
true;

/* Test 47 */
ce(nintegrate(1/(sqrt(1-x)*x^(4/5)),[x,0,1]), beta(1/5,1/2), 1e-8)$
true;

/* Test 48 */
ce(nintegrate(log(2*x)/sqrt(1-x),[x,0,1]), 6 * log(2) - 4, 1e-8)$
true;


/*
  Must explicitly give the roots of sin(x) within integration range
  Omitting the singularities still works, but with reduced accuracy
  and warnings.
  But, with to_poly_solve and a little more work, we could compute these
  roots automatically.
*/
/* Test 49 */
cec(nintegrate(1/(sqrt(sin(x))),[x,0,10], points->[%pi,2*%pi,3*%pi]),
     10.48823021716687 - 6.769465521725385 * %i, 1e-7)$
true;   


/* Test 50 */
ce(nintegrate('nintegrate(x*y,[x,0,1],info->false),[y,0,1]), 1/4, 1e-10);
true$

/* Need both quotes here */
/* Test 51 */
ce(nintegrate('first('nintegrate(x*y,[x,0,1])),[y,0,1]),  1/4, 1e-10);
true$

/* Test 52 */
ce(nintegrate(x*y,[x,0,1],[y,0,1]), 1/4, 1e-10);
true$

/* Test 53 */
ce(nintegrate(x*y*z,[x,0,1],[y,0,1],[z,0,1]), 1/8, 1e-10);
true$

/* Test 54 */
ce(nintegrate(x*1/(sqrt(y)),[x,0,1],[y,0,1]), 1, 1e-10);
true$

/* Test 55 */
cec(nintegrate(x*1/(sqrt(y-1)),[x,0,1],[y,0,1]), -1 * %i, 1e-10);
true$

/* We need the option real, because the imaginary part causes
   and error. We nee more logic to catch this.
*/   
/* Test 56 */
ce(nintegrate(4*exp(-x*x)*exp(-y*y), [x,0,inf], [y,0,inf], real->true), %pi, 1e-10);
true$

/* xxx Test  */
/* Fails just because we don't have the logic yet
cec(nintegrate(x*1/(sqrt(y-1)),[x,0,1],[y,0,2]), -1 * %i, 1e-10);
true$
*/

/* Test 57 */
/* Example in Mma docs supplies singular points. We don't need to do this.
   nintegrate(sqrt(log(x-7)),[x,0,20], [7,8]);
   NIntegrate[Sqrt[Log[x - 7]], {x, 0, 20}, Exclusions -> {7, 8}]    
*/   
cec(nintegrate(sqrt(log(x-7)),[x,0,20], epsrel->1e-10),
   rectform(float(rectform(integrate(sqrt(log(x-7)),x,0,20)))), 1e-10)$
true;

/*
  This works well, but needs extra subintervals
  first(nintegrate(exp(%i*x),[x,1,10^4], subint -> 3000)) -
     rectform(float(integrate(exp(%i*x),x,1,10^4)));
     2.247091401841317e-13 %i + 2.675637489346627e-13

  A better method for this would be good.
  In fact quad_qawo(1, x, 1, 10^4, 1, cos) works well. Faster, with fewer intervals
  and no error. We could try to detect this somehow.
*/     
/* Test 58 */
cec(nintegrate(exp(%i*x),[x,1,10^4], subint -> 3000),rectform(float(integrate(exp(%i*x),x,1,10^4))),1e-12)$
true;

/* This is ok, but slow
  first(nintegrate(1/sqrt(x) + cos(x), [x,0,5000], subint->1000)) -
     float(integrate(1/sqrt(x) + cos(x), x,0,5000));

  What would work: integrate each term, using qawo on the cosine part.
  (I wonder when we are allowed to use symbolic integration, anyway)
  quad_qawo(1, x, 0, 5000, 1, cos, epsrel=1e-9); This essentially does
  analytic integration, anyway.

*/

/* Test 59 */
ce(nintegrate(1/sqrt(x) + cos(x), [x,0,5000], subint->1000),
   float(integrate(1/sqrt(x) + cos(x), x,0,5000)), 1e-12)$
true; 

/*
 Following works, but it is slow.

Correct result is:
(sqrt(%pi) ((sqrt(2) %i + sqrt(2)) erf(50 %i + 50)
 + (sqrt(2) %i - sqrt(2)) erf(50 %i - 50)))/4

 = 1.251128192999533

Following is much faster, but the routine does not allow us to go too close to 0.
quad_qawo (1/sqrt(x), x, 1e-12, 5000, 1, sin, epsrel=1e-13);

We would have to split the interval and integrate from, say 0 to 1
and then 1 to 5000.
 
*/

/* Test 60 */
ce(nintegrate(sin(x)/sqrt(x),[x,0,5000],subint->1000),rectform(float(integrate(sin(x)/sqrt(x),x,0,5000))),
    1e-7)$
true;  

/* from maxima mailing list Sept 15 2013 */
/* Test */
cec( nintegrate(sqrt(1+(4*x^(1/3)-1/16*x^((-1)/3))^2),[x,-8,512],epsrel->1e-13),
 3/16 * (65697 + 127 * %i * sqrt(3)), 1e-8);
true$    

/* Test 61 */
kill(ce)$
done;

/*

Look at, or include these from Mma docs.

This does not work with infinite range.
nintegrate(bessel_j(1,x),[x,1,inf],subint->10000);
This gets there, but very slowly
nintegrate(bessel_j(1,x),[x,1,30000],subint->10000);

nintegrate(bessel_j(2,sqrt(2)*x)^2,[x,1,10^4],subint->10000);

Converges too slowly
nintegrate(sin(1/((5*x-1)*(5*x-2)*(5*x-3))),[x,0,1], subint->10000);

This is worse
nintegrate(sin(1/((5*x-1)*(5*x-2)*(5*x-3))),[x,0,1], [1/5,2/5,3/5],  subint->10000);

Converges slowly
nintegrate(sin(1/x)*cos(1/(1-x)),[x,0,1],subint->10000);

This says OK, but it is not efficient
nintegrate(sin(1/x)*cos(1/(1-x)),[x,0,1],subint->20000, epsrel->1e-6);

*/


/* We cannot do these:

  quad_qag(cos(log(x)/x)/x, x,0,1,6); fails
  nintegrate(cos(log(x)/x)/x,  [x,0,1]);

  Can do this transformation, but I am not sure how it helps
  nintegrate( cos(-u*log(u))/(u), [u,1,1000], subint->1000);

  ---------

  nintegrate(exp(%i*x*x),[x,minf,inf]); fails

  The error estimates given here are too low, I think.
   No , maybe not too low.
  nintegrate(exp(%i*x*x),[x,-200,200],subint->10000);
  [1.25170114 %i + 1.25804682, 2.507635982e-8, 760578, no problems]

  integrate(cos(x*x),x) =
    -sqrt(%pi)*((sqrt(2)*%i-sqrt(2))*erf((sqrt(2)*%i+sqrt(2))*x/2)
                  +(sqrt(2)*%i+sqrt(2))*erf((sqrt(2)*%i-sqrt(2))*x/2))

  Mma says it is this, which agrees with numerical intgration.
  intval(x) := sqrt(%pi/2)*fresnel_c(sqrt(2/%pi)*x);

  integrate(cos(x*x),x,minf,inf) = sqrt(%pi)/sqrt(2) = 1.2533141373155

  Maybe handle this by susbstituting  u = x^2, then
  using qawo.

  cos(x^2) dx --> cos(u)/sqrt(u) .

  No! Adding these results is fine.
  quad_qawf (1/sqrt(x), x, 1, 1, 'cos, 'epsabs=1e-13);
  nintegrate(cos(x)/sqrt(x),[x,0,1], epsrel->1e-13);
  qagi fails on the infinite interval


*/
