mext maxima third party code installation system.

--------
 Copyright (C) 2012,2013 John Lapeyre
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 3 of the License, or
 (at your option) any later version.
--------

The latest code works with Maxima 5.28, and most of it works with 5.30.

This repository contains the mext packaging system and packages for
the Maxima computer algebra system.

This folder tree contains the mext system, as well as several packages
for which it was written: defmfun1, aex, and code that depends on
these. In addition, there are, several 'packages' from the maxima
third party code repository. There are a few packages made from code
in the maxima share and contrib folders. (Currently, we refer to all
of these as 'distributions' rather than 'packages', but we may change
to 'package'.)

See the file 'INSTALL' for installation instructions.

--------
Features in Brief:

mext:

* System for standardized compilation, installation, loading of packages.

* Minimizes recompilation and reloading.

* Standardized specification of dependencies. Dependencies are
  loaded only once.

* Concurrent (binary/source) installation for different Maxima and lisp versions.

* Functions: chdir,list_directory,pwd,popdir,updir,dir_exists, etc.

* mext_list,mext_list_loaded,mext_info to see info on installed
  packages, loaded packages, etc.

* mext_test(packname) to run rtests, which are installed in a
  standard location.

* Minimizes filename collision between packages.

* Supports installation of stock Maxima `share' packages to mext system
  directly from the Maxima installation. This allows the packages to
  be compiled (once) and installed for multiple Maxima/lisp versions
  and to be loaded (once) as dependencies, and to survive `kill(all)', and
  to be tested quickly and easily. See for example `grobner'.

* After mext is installed: Download third party mext package
  'packname' and unzip.  Do `load("packname/ibuild.mac")' to build and
  install software and rtests to a directory automatically named for
  the running Maxima/lisp. Do `mext_test(packname)' to run installed tests.
  Packager specifies which files are compiled or left as source, etc.
  Currently, all but one third party package is in mext repository.

Documentation systems:

* Multiple documentation systems accessed via `describe' and ??

* Two systems: one simple, one more full-featured for user documents.

* Doc system for internal/devel documents.

* Easy selection to include/exclude documentation from ??.

* Examples integrated into documentation system.

* Many ways to enter examples: Examples not executed before displaying;
  or executed but with variables transparently localized.
  (stock Maxima does not do this.)

* Macros for user and internal functions and variables to automatically
  generate documentation that is accessible immediately with ??.

defmfun1:

* lisp macro to define functions to be called from Maxima.

* Automatic (optional) detailed argument checking.

* Standardized option passing: 'opt->val'. Automatic, standarized
  extraction, of required, optional, and option arguments.

* Automatically (optionally) generate documentation using
  various sources (such as argument checks.)

* Standardized, automatic, error messages. No extra coding required.

* Support 'attributes': e.g. for each function to switch between raising
  error or returning input form, or printing warning. Attributes also
  control argument evaluation.

* Option 'compile' to automatically compile lambda functions passed
  as arguments. Used in many functions listed below.

aex:

* expressions stored as lisp arrays, rather than lisp lists.

* advantage is that `random access' is O(1), rather than O(n).

* Many functions included in mext packages. These usually use standard
  lisp lists for input and output, unless aex is requested. A main goal
  is to code for and to test for efficiency.

  lrange -- list of range of numbers.
  table -- defmfun1 wrapper on Ziga Lenarcic's code.
  constant_list,count,drop_while,fold,fold_list,
  length_while, nest, nest_list, nest_while, nreverse, partition_list
  select, take, take_while, tuples, string_drop, string_take,
  with_output_to_string.

  Some replacements of Maxima functions, less generally
  applicable, but much more efficient in some cases.
  icons (cons), imap (map), every1 (every).

discrete:

  Efficient routines for:
  from_digits,integer_digits,integer_string,
  ae_random_permutation,cycles_to_perm,
  inverse_permutation,perm_to_cycles,perm_to_transpositions,
  permutation_p,random_cycle,random_permutation_sym,
  signature_permutation,transpositions_to_perm.

numerical:

* nintegrate -- currently a front end to quadpack.  Subdivides
  interval, calls quadpack routines, combines results. Finds some
  singularities and passes information to quadpack. Identifies and
  separately integrates real and imaginary parts.
 
--------

Much of the third party software packaged here uses the maxdoc
documentation system, with documentation embedded in the source code.
This allows printing online documentation via ? and ??.  A latex
translator is also available. A texi translator is partially done.
See the output in the files thirdparty.{tex,pdf,html}. The latex file
is created by loading mext packages and then giving the command
print_sections_latex(); to print the documentation for all loaded
packages.

The mext system packages the distributions in a more-or-less
uniform way. They are built and installed using only maxima,
rather than depending directly on any system tool. (There are
some shell/perl scripts to automate testing with several lisps
under linux, but this is not part of the system.)

Most or all of this has been found to work on at least one
platform running maxima with:
linux gcl,sbcl,ccl,clisp,cmucl,ecl; win32 gcl,ccl.

This code can be used now, but is also experimental. It is an `add-on'
to Maxima. But it overwrites some Maxima code (Only when you load
it. It does not touch your Maxima installation!) The redefinitions are
isolated: maxdoc/descr1.lisp and aex/system-essential.lisp. Much of
this could be included in stock Maxima without breaking the test-suite,
but for the time being, I decided to overwrite stock Maxima only
when essential.

Features, more details:

* Only one subdirectory of the user directory is added to the maxima
search paths. For each distribution, there is one file in this
directory that loads code. The code for each distribution, as well as
rtests, etc. are located in further subfolders that are not added to
the maxima search path by default. This helps to reduce filename
collisions.  Actually the subdirectory that is put in the search path
is named for the maxima version and the lisp implementation and the
lisp version. So, different maxima and lisps can be used in
parallel. This system is set up with load('mext);

* A distribution can be loaded with require('distname); or
require("distname"); The distribution is registered for the session
and subsequent calls to require('distname) do nothing. Clobbering
by kill(all), has been addressed. See `?? dont_kill'.


* Installing binary only, source only, or a combination is
supported. In stock Maxima, there is often a good amount of reloading
and recompiling every time a user loads code. The mext system and
packages attempt to compile once and load compiled code when possible,

* Installation and running of rtests is standardized:
 mext_test(dist1,dist2);

* Building and installation is done mostly with defsystem. There are
some other parts. Much of the distribution definition follows
defsystem or asdf exactly. This might make it easier to move to asdf
in the future.

* Building from the maxima share and contrib directories is supported.
That is, a mext definition is written that optionally compiles and
installs source from the maxima share directory to the user mext
directory.

* Functions for dealing with pathnames, files, and directories are
included in mext. This includes cl-fad, a portable pathname library,
hacked to support gcl somewhat. Some functions in gcl are missing, not
ansi-compliant, or broken. (but, gcl also found an error that 5 other
lisps missed!)  mext uses an interface to many of the ansi pathname
functions and cl-fad functions, implemented as functions with the ansi
name preceded with an 'f'.  For behavior not specified by the
standard, I standardized on sbcl. Most of these functions for most
lisps call the standard function. The result is not well tested, but
currently works for installing distributions with six lisp
implementations under linux and gcl and clozure lisp under win32.

* I tried as much as possible to keep the pathname code portable. That
is, I avoided '.\/'. This makes the maintainer level code, i.e. calls
to provide and require a bit more verbose, as paths are specified as
lists rather than strings with directory separators.

Non-features:

 Much of the underlying code and more seems to be provided as well by
 asdf and related tools. But, the code in mext serves as a stop-gap as
 long as maxima on gcl/win32 is widely used.

 Not much documentation. But here are some examples (with some
 lines edited out.) Note that the key :maintainer below is used
 in the sense of a linux package maintainer or asdf maintainer:
 It refers to the person who packaged the code with the packaging
 system.

 There is a mext package called 'mext_defmfun1'. This redefines some
 of the mext functions with documentation and error checking. If this
 package is installed, then online help is available via '?' for
 chdir, mext_test, mext_list, mext_info, truename, probe_file, and
 pwd. If you install 'mext_defmfun1', then '?? runtime' will give
 documentation for some functions.

(%i1) showtime:true$
Evaluation took 0.0000 seconds (0.0000 elapsed) using 0 bytes.
(%i2) load(mext);
Evaluation took 0.0300 seconds (0.0330 elapsed) using 4.570 MB.
(%o2)                  /home/jlapeyre/.maxima/mext.lisp
(%i3) require(aex);
loading /home/jlapeyre/.maxima/mext/v5.28.0-sbcl-v1.0.57.0.debian/aex.mac
loading /home/jlapeyre/.maxima/mext/v5.28.0-sbcl-v1.0.57.0.debian/defmfun1.mac
loading /home/jlapeyre/.maxima/mext/v5.28.0-sbcl-v1.0.57.0.debian/maxdoc.mac
Evaluation took 0.4800 seconds (0.4680 elapsed) using 92.449 MB.
(%o3)  /home/jlapeyre/.maxima/mext/v5.28.0-sbcl-v1.0.57.0.debian/aex.mac
(%i4) require(aex);
Evaluation took 0.0000 seconds (0.0000 elapsed) using 0 bytes.
(%o4)                                true
(%i5) require(nelder_mead);
loading /home/jlapeyre/.maxima/mext/v5.28.0-sbcl-v1.0.57.0.debian/nelder_mead.mac
Evaluation took 0.0600 seconds (0.0550 elapsed) using 11.157 MB.
(%o5) /home/jlapeyre/.maxima/mext/v5.28.0-sbcl-v1.0.57.0.debian/nelder_mead.mac
(%i6) require(pw);
loading /home/jlapeyre/.maxima/mext/v5.28.0-sbcl-v1.0.57.0.debian/pw.mac
Evaluation took 0.8900 seconds (0.9070 elapsed) using 135.455 MB.
(%o6)  /home/jlapeyre/.maxima/mext/v5.28.0-sbcl-v1.0.57.0.debian/pw.mac
(%i7) mext_info(aex);
 Name: aex
 Description: array representation for maxima expressions
 Version: 0.0.1
 Author: John Lapeyre
 License: GPL
 Maintainer: John Lapeyre
(%o7)                                done
(%i8) mext_info(nelder_mead);
 Name: nelder_mead
 Description: Nelder-Mead optimization algorithms
 Version: 
 Author: Mario S. Mommer
 License: in_dist
 Maintainer: John Lapeyre
(%o8)                                done
(%i9) mext_info(pw);
 Name: pw
 Description: functions for symbolic work with piecewise functions
 Version: 6.5
 Author: Richard V. Hennessy <rich.hennessy@verizon.net>
 License: GPL2
 Maintainer: John Lapeyre
(%o9)                                done
(%i10) mext_test(aex);
Running tests in /home/jlapeyre/.maxima/mext/v5.28.0-sbcl-v1.0.57.0.debian/aex/rtests/rtest_take.mac: 30/30 tests passed
Running tests in /home/jlapeyre/.maxima/mext/v5.28.0-sbcl-v1.0.57.0.debian/aex/rtests/rtest_table.mac: 2/2 tests passed
Running tests in /home/jlapeyre/.maxima/mext/v5.28.0-sbcl-v1.0.57.0.debian/aex/rtests/rtest_list.mac: 9/9 tests passed
Running tests in /home/jlapeyre/.maxima/mext/v5.28.0-sbcl-v1.0.57.0.debian/aex/rtests/rtest_afuncs.mac: 2/2 tests passed
No unexpected errors found out of 43 tests....
(%o10)                               done
(%i11) mext_test(nelder_mead);
No unexpected errors found out of 0 tests.
(%o11)                               done
(%i12) mext_test(pw);
Running tests in /home/jlapeyre/.maxima/mext/v5.28.0-sbcl-v1.0.57.0.debian/pw/rtests/rtest_pw.mac: 226/226 tests passed
No unexpected errors found out of 226 tests.
(%o12)                               done
(%i13) pwd();
(%o13)                    /home/jlapeyre/maxima/mext/
(%i14) list_directory();
          .... 
(%i15) ?? nelder

------------------------------------------------
 -- Function: nelder_mead: nelder_mead(<expr>, <vars>, <init>)
    Section: Functions and Variables for Equations

Description:
   The Nelder-Mead optimization algorithm. 
Arguments:
   nelder_mead requires three arguments.
    The second argument <vars> must be a list of symbols.
    The third argument <init> must be a list of numbers.

Examples:

   Find the minimum of a function at a non-analytic point. 
(%i1) nelder_mead(if x<0 then -x else x^2, [x], [4]);
(%o1) [x = 9.536387892694629e-11]
(%i1) f(x) := if x<0 then -x else x^2$
(%i2) nelder_mead(f, [x], [4]);
(%o2) [x = 9.536387892694628e-11]
(%i3) nelder_mead(f(x), [x], [4]);
(%o3) [x = 9.536387892694628e-11]
(%i1) nelder_mead(x^4+y^4-2*x*y-4*x-3*y, [x,y], [2,2]);
(%o1) [x = 1.157212489168102,y = 1.099342680267472]


  Author: Mario S. Mommer.

----------------------------------------------------------------

LocalWords:  mext maxima defmfun aex contrib perl linux gcl sbcl ccl
LocalWords:  clisp cmucl ecl subdirectory rtests subfolders distname
LocalWords:  defsystem asdf pathnames pathname ansi clozure chdir pwd
LocalWords:  truename runtime nelder pw Lapeyre GPL Mommer piecewise
LocalWords:  expr init maxdoc texi thirdparty tex pdf html popdir dir
LocalWords:  updir packname filename grobner devel lrange Ziga tuples
LocalWords:  Lenarcic's nreverse imap ae sym nintegrate quadpack dont
LocalWords:  redefinitions
